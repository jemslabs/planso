generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]
  joinedOrgs    Member[]
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  members     Member[]
  posts       Post[]
  inviteCode  String   @unique
}

model Member {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           Role         @default(MEMBER)
  access         Boolean
  joinedAt       DateTime     @default(now())
  posts          Post[]
  feedbacks      Feedback[]
  postsApproved  Post[]       @relation("PostApproved")
  postsRejected  Post[]       @relation("PostRejected")
  postsScheduled Post[]       @relation("PostScheduled")

  @@unique([userId, organizationId])
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  description    String       @db.Text
  platforms      Platform[]
  status         PostStatus   @default(PENDING)
  memberId       Int
  member         Member       @relation(fields: [memberId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  feedbacks      Feedback[]

  approvedById  Int?
  approvedBy    Member? @relation("PostApproved", fields: [approvedById], references: [id])
  rejectedById  Int?
  rejectedBy    Member? @relation("PostRejected", fields: [rejectedById], references: [id])
  scheduledById Int?
  scheduledBy   Member? @relation("PostScheduled", fields: [scheduledById], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  feedback  String   @db.Text
  createdAt DateTime @default(now())

  @@unique([memberId, postId])
}

enum Role {
  OWNER
  MEMBER
}

enum Platform {
  LINKEDIN
  X
  THREADS
  INSTAGRAM
  YOUTUBE
}

enum PostStatus {
  PENDING
  APPROVED
  SCHEDULED
  POSTED
  REJECTED
}
